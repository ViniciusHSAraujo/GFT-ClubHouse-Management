// <auto-generated />
using System;
using GFT_ClubHouse__Management.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GFT_ClubHouse__Management.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200209174715_InitialMigrationFixed")]
    partial class InitialMigrationFixed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GFT_ClubHouse__Management.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("Zip")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Seattle",
                            State = "Washington",
                            Street = "1234 1St Ave",
                            Zip = "98101"
                        });
                });

            modelBuilder.Entity("GFT_ClubHouse__Management.Models.ClubHouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("ClubHouses");
                });

            modelBuilder.Entity("GFT_ClubHouse__Management.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Capacity");

                    b.Property<int>("ClubHouseId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("MusicalGenreId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<double>("Price");

                    b.HasKey("Id");

                    b.HasIndex("ClubHouseId");

                    b.HasIndex("MusicalGenreId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("GFT_ClubHouse__Management.Models.MusicalGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("MusicalGenres");
                });

            modelBuilder.Entity("GFT_ClubHouse__Management.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<int>("Roles");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Email = "admin@admin.com",
                            LastName = "Default",
                            Name = "Admin",
                            Password = "2285d2badca55370a0d794a9df898c29922d21504c5c2c7fcb984c75328ad424",
                            Phone = "123456789",
                            Roles = 0
                        });
                });

            modelBuilder.Entity("GFT_ClubHouse__Management.Models.ClubHouse", b =>
                {
                    b.HasOne("GFT_ClubHouse__Management.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GFT_ClubHouse__Management.Models.Event", b =>
                {
                    b.HasOne("GFT_ClubHouse__Management.Models.ClubHouse", "ClubHouse")
                        .WithMany()
                        .HasForeignKey("ClubHouseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GFT_ClubHouse__Management.Models.MusicalGenre", "MusicalGenre")
                        .WithMany()
                        .HasForeignKey("MusicalGenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GFT_ClubHouse__Management.Models.User", b =>
                {
                    b.HasOne("GFT_ClubHouse__Management.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
